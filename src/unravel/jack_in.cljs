(ns unravel.jack-in)

(def payload #_start "#!/usr/bin/env bash\n\nset -euo pipefail\n\nmake_command() {\n    cmd=\"(do (require 'clojure.core.server) (let [srv (clojure.core.server/start-server {:name :repl :port 0 :accept 'clojure.core.server/repl :server-daemon false})] (println (str \\\\newline (pr-str [:jack-in/ready {:method :${1}, :port (.getLocalPort srv)}])))))\"\n}\n\nif [[ \"${1-}\" == \"--method\" ]]; then\n    method=\"$2\"\nelif [[ -e build.boot ]]; then\n        method=boot\nelif [[ -e project.clj ]]; then\n    method=lein\nelse\n    method=clojure\nfi\n\ncase \"$method\" in\n    boot)\n        make_command boot\n        exec boot call -e \"$cmd\" wait\n        ;;\n    lein)\n        make_command lein\n        exec lein trampoline run -m clojure.main -e \"$cmd\"\n        ;;\n    clojure)\n        make_command clojure\n        exec clojure -e \"$cmd\"\n        ;;\n    *)\n        echo Unknown method: \"$method\"\n        exit 1\nesac\n\n" #_end) ;; <!-- $RPLCR$ s:(#_start).*(#_end):$1." ".$ENV{PAYLOAD}." ".$2:e -->
